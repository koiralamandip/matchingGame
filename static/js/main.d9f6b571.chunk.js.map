{"version":3,"sources":["components/Card/index.tsx","components/HighScoreOverlay/Entry.tsx","components/functions.ts","components/HighScoreOverlay/index.tsx","components/RightSection/index.tsx","App.tsx","reportWebVitals.ts","state/reducers/userReducer.ts","state/saga.ts","state/store.ts","index.tsx"],"names":["Card","cardProps","className","value","index","onClick","event","disabled","element","target","parentElement","classList","add","clickEvent","Entry","props","user","name","you","score","high","shuffleCards","arrayOfSize","i","length","randomIndex","Math","floor","random","currentIndex","temp","gridLen","Array","from","keys","getFormattedTime","time","sec","min","HighScoreOverlay","array","overlayRef","useRef","userState","useSelector","state","visible","ref","callback","users","sort","a","b","map","gameplay","id","currentUser","RightSection","useState","setName","isHighscoreOverlay","setHighscoreOverlay","dispatch","useDispatch","useEffect","type","handleChangeCurrent","e","dataset","userId","payload","find","handleHighScoreVisibility","last","method","onSubmit","preventDefault","alert","placeholder","onChange","App","cardArr","setCardArr","timeValue","setTimeValue","step","setStep","start","setStart","matchedCards","setMatchedCards","openedCards","setOpenedCards","resetGame","forEach","card","remove","handleCardClick","htmlElement","prev","document","getElementsByClassName","style","gridTemplateColumns","sqrt","concat","setTimeout","toggle","interval","setInterval","clearInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","reducers","combineReducers","action","getUser","addUser","updateScore","getUserSaga","addUserSaga","updateScoreSaga","rootSaga","call","fetchUser","all","put","one","console","log","_addUser","_updateScore","axios","get","headers","resp","data","post","response","takeLatest","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","mySaga","ReactDOM","render","StrictMode","getElementById"],"mappings":"oRA2CeA,EA7Ba,SAACC,GAYzB,OACI,sBAAKC,UAAU,OAAO,aAAYD,EAAUE,MAAO,aAAYF,EAAUG,MAAOC,QAR5D,SAACC,GACrB,IAAIL,EAAUM,SAAd,CACA,IAAMC,EAAWF,EAAMG,OAA0BC,cACjDF,EAASG,UAAUC,IAAI,gBACvBX,EAAUY,WAAWL,KAIrB,UAEI,qBAAKN,UAAU,kBAAf,SACI,uCAIJ,qBAAKA,UAAU,gBAAf,SACKD,EAAUE,Y,eCRZW,EAbW,SAACC,GACvB,OACI,sBAAKb,UAAU,QAAf,UACI,sBAAKA,UAAU,kBAAf,UAAkCa,EAAMC,KAAKC,KAA7C,IAAqDF,EAAMG,IAAM,QAAU,MAC3E,sBAAKhB,UAAU,sBAAf,UACI,qBAAKA,UAAU,4BAAf,4BACA,sBAAKA,UAAU,wBAAf,UAAwCa,EAAMC,KAAKG,MAAMC,KAAzD,wBChBHC,G,MAAe,SAACC,GACzB,IAAK,IAAIC,EAAID,EAAYE,OAAQD,EAAI,EAAGA,IAAI,CAC1C,IAAME,EAAcC,KAAKC,MAAMD,KAAKE,SAAWL,GACzCM,EAAeN,EAAI,EACnBO,EAAOR,EAAYO,GACzBP,EAAYO,GAAgBP,EAAYG,GACxCH,EAAYG,GAAeK,EAE7B,OAAOR,IAKEA,EAAc,SAACS,GAC5B,OAAOC,MAAMC,KAAKD,MAAcD,EAAUA,GAASG,SAOtCC,EAAmB,SAACC,GAC7B,IAAIC,EAAMD,EAAO,GACbE,EAAMZ,KAAKC,MAAMS,EAAO,IAC5B,OAASE,GAAO,EAAI,IAAMA,EAAMA,GAAQ,KAAQD,GAAO,EAAI,IAAMA,EAAMA,ICoB5DE,EAnCyB,SAACxB,GAGrC,IDgBiByB,EChBXC,EAAaC,iBAAO,MAGpBC,EAA0BC,aAAY,SAACC,GAAD,OAAkBA,EAAMF,aAEpE,OACI,qBAAKzC,UAAYa,EAAM+B,QAAU,eAAiB,UAAWC,IAAKN,EAAlE,SACI,sBAAKvC,UAAU,YAAf,UACI,sBAAKA,UAAU,OAAf,UACI,qBAAKA,UAAU,mBAAf,wBAKA,wBAAQA,UAAU,mBAAmBG,QAASU,EAAMiC,SAApD,sBAEJ,sBAAK9C,UAAU,mBAAf,UACI,qBAAKA,UAAU,MAAf,gEDDCsC,ECKIG,EAAUM,MDJ1BT,EAAMU,MAAK,SAACC,EAASC,GAAV,OAAsBD,EAAEhC,MAAMC,KAAOgC,EAAEjC,MAAMC,SCIvBiC,KAAI,SAACrC,GACvB,OAAQA,EAAKsC,SAAW,GAAM,cAAC,EAAD,CAAOtC,KAAMA,EAAME,IAAKF,EAAKuC,KAAOZ,EAAUa,YAAYD,iBC+DjGE,EA5FU,WAGrB,MAAwBC,mBAAS,IAAjC,mBAAOzC,EAAP,KAAa0C,EAAb,KAEA,EAAkDD,oBAAS,GAA3D,mBAAOE,EAAP,KAA2BC,EAA3B,KAGMlB,EAA2BC,aAAY,SAACC,GAAD,OAAkBA,EAAMF,aAE/DmB,EAAWC,cAKjBC,qBAAU,WACNF,EAAS,CAACG,KAAM,iBACjB,IAGH,IAiBMC,EAAsB,SAACC,GAC3B,IAAMZ,EAAMY,EAAE1D,OAA0B2D,QAAQC,OAEhDP,EAAS,CAACG,KAAM,mBAAoBK,QAAS3B,EAAUM,MAAMsB,MAAK,SAAAvD,GAAI,OAAIA,EAAKuC,KAAOA,QAIlFiB,EAA4B,WAChCX,GAAqBD,IAIvB,OACE,sBAAK1D,UAAU,eAAf,UACE,cAAC,EAAD,CAAkB4C,QAASc,EAAoBZ,SAAUwB,IACzD,sBAAKtE,UAAU,uBAAf,UACE,qBAAKA,UAAU,QAAf,mCAGA,qBAAKA,UAAU,YAAf,SACGyC,EAAUa,YAAYvC,OAEzB,sBAAKf,UAAU,WAAf,UACE,sBAAMA,UAAU,YAAhB,4BACA,uBAAMA,UAAU,OAAhB,UAAwByC,EAAUa,YAAYrC,MAAMC,KAApD,UAAuG,IAArCuB,EAAUa,YAAYrC,MAAMC,KAAa,QAAU,SAEvH,sBAAKlB,UAAU,YAAf,UACE,sBAAMA,UAAU,YAAhB,6BACA,uBAAMA,UAAU,OAAhB,UAAwByC,EAAUa,YAAYrC,MAAMsD,KAApD,UAAuG,IAArC9B,EAAUa,YAAYrC,MAAMsD,KAAa,QAAU,SAEvH,sBAAKvE,UAAU,WAAf,UACE,sBAAMA,UAAU,YAAhB,sBACA,uBAAMA,UAAU,OAAhB,UAAwByC,EAAUa,YAAYF,SAA9C,mBAGJ,sBAAKpD,UAAU,wBAAf,UACE,sBAAMA,UAAU,mBAAmBG,QAASmE,EAA5C,wBACA,qBAAKtE,UAAU,QAAf,6BACA,uBAAMA,UAAU,QAAQwE,OAAO,OAAOC,SAvDvB,SAACR,GACpBA,EAAES,iBAEW,KAAT3D,EAOJ6C,EAAS,CAACG,KAAM,WAAYK,QAAS,CAACrD,KAAMA,EAAME,MAAO,CAACC,KAAM,EAAGqD,KAAM,GAAInB,SAAU,KANrFuB,MAAM,gCAmDJ,UACE,uBAAOZ,KAAK,OAAOhD,KAAK,OAAO6D,YAAY,WAAWC,SAAU,SAACZ,GAAD,OAAOR,EAAQQ,EAAE1D,OAAON,UACxF,wBAAQ8D,KAAK,SAAS/D,UAAU,mBAAhC,4BAGJ,sBAAKA,UAAU,gBAAf,UACE,qBAAKA,UAAU,YAAf,0CACA,qBAAKA,UAAU,YAAf,SAEI8B,MAAMC,KAAKU,EAAUM,OAAOI,KAAI,SAACrC,GAAD,OAAW,qBAAKd,UAAU,QAAQ,eAAcc,EAAKuC,GAAIlD,QAAS6D,EAAvD,SAA6ElD,EAAKC,mBCiH5H+D,EAtMC,WACd,IAMA,EAA8BtB,oBAAS,WAAO,OAAOrC,EAAaC,EANlD,OAMhB,mBAAO2D,EAAP,KAAgBC,EAAhB,KAmBA,EAAkCxB,mBAAS,GAA3C,mBAAOyB,EAAP,KAAkBC,EAAlB,KAGA,EAAwB1B,mBAAS,GAAjC,mBAAO2B,EAAP,KAAaC,EAAb,KAGA,EAA0B5B,oBAAS,GAAnC,mBAAO6B,EAAP,KAAcC,EAAd,KAGA,EAAwC9B,mBAA2B,IAAnE,mBAAO+B,EAAP,KAAqBC,EAArB,KAIA,EAAsChC,mBAA2B,IAAjE,mBAAOiC,EAAP,KAAoBC,EAApB,KAGMjD,EAA0BC,aAAY,SAACC,GAAD,OAAkBA,KAAOF,UAG/DmB,EAAWC,cAYX8B,EAAY,WAMhBJ,EAAaK,SAAQ,SAACC,GACpBA,EAAKpF,UAAUqF,OAAO,WACtBD,EAAKpF,UAAUqF,OAAO,mBAIxBL,EAAYG,SAAQ,SAACC,GAEnBA,EAAKpF,UAAUqF,OAAO,mBAIxBd,EAAW7D,EAAaC,EAAY,KACpCgE,EAAQ,GACRM,EAAe,IACfF,EAAgB,IACZH,GAAOC,GAAS,GACpBJ,EAAa,IAMTa,EAAkB,SAACC,GAEI,IAAvBP,EAAYnE,OACdoE,GAAe,SAACO,GAAD,4BAAcA,GAAd,CAAoBD,OAEnCN,EAAe,CAACM,KA0EpB,OA/CAlC,qBAAU,WACJyB,EAAajE,SAAWyD,EAAQzD,SAClCgE,GAAS,GAET1B,EAAS,CAACG,KAAM,kBAAmBK,QAAS,CAACG,KAAMY,EAAMrE,KAAM2B,EAAUa,eAEzEqB,MAAM,4CAA8CQ,EAAO,aAAelD,EAAiBgD,GAAa,SAGzG,CAACM,IAGJzB,qBAAU,WACPoC,SAASC,uBAAuB,kBAAkB,GAAsBC,MAAMC,oBAAsB,UAAY7E,KAAK8E,KAAKvB,EAAQzD,QAAU,YAC5I,CAACyD,EAAQzD,SAKZwC,qBAAU,WACmB,IAAvB2B,EAAYnE,SACd8D,GAAQ,SAACD,GAAD,OAAUA,EAAO,KAzCvBM,EAAY,GAAGvB,QAAQjE,QAAUwF,EAAY,GAAGvB,QAAQjE,OACxDwF,EAAYG,SAAQ,SAACC,GACrBA,EAAKpF,UAAUC,IAAI,cAErB8E,GAAgB,SAACD,GAAD,OAAkBA,EAAagB,OAAOd,OAGtDe,YAAW,WACTf,EAAYG,SAAQ,SAACC,GAAD,OAAUA,EAAKpF,UAAUgG,OAAO,qBACnD,QAmCJ,CAAChB,IAMJ3B,qBAAU,WAGR,IAAI4C,EASJ,OAXCR,SAASC,uBAAuB,SAAS,GAAwB9F,SAAWgF,EAGzEA,EACFqB,EAAWC,aAAY,WACrBzB,GAAa,SAACD,GAAD,OAAeA,EAAY,OACvC,KAEH2B,cAAcF,GAGT,kBAAME,cAAcF,MAE1B,CAACrB,IAIF,sBAAKrF,UAAU,MAAf,UACE,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,sBAAKA,UAAU,OAAf,UACE,sBAAKA,UAAU,YAAf,iBAA+B,uBAAMA,UAAU,wBAAhB,cAA0CiC,EAAiBgD,GAA3D,UAC/B,sBAAKjF,UAAU,QAAf,kBAA4B,uBAAMA,UAAU,mBAAhB,cAAqCmF,EAArC,aAE9B,sBAAKnF,UAAU,WAAf,UACE,qBAAKA,UAAYqF,EAAQ,eAAiB,4BAA1C,SACE,wBAAQrF,UAAU,yBAAyBG,QA9HrC,WACZoF,EAAajE,SAAWyD,EAAQzD,QAClCqE,IAEFL,GAAS,IA0HC,qBAEF,wBAAQtF,UAAU,yBAAyBG,QAASwF,EAApD,oCAUAZ,EAAQ5B,KAAI,SAAC0C,GACX,OAAO,cAAC,EAAD,CAAM3F,MAAQ2F,EAAM5F,OAAQ4F,EAAO,GAAMrE,KAAKC,MAAMsD,EAAQzD,OAAO,GAAKX,WAAYoF,EAAiB1F,UAAWgF,YAK/H,cAAC,EAAD,QC3LSwB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,wBCwDRQ,EAA6B,CAC/BvE,MAAO,GACPO,YAAa,CAACvC,KAAM,QAASsC,GAAI,IAAKpC,MAAO,CAACC,KAAM,EAAGqD,KAAM,GAAInB,SAAU,IAgChEmE,EAJEC,YAAgB,CAC7B/E,UAvBgB,WAAyD,IAAxDE,EAAuD,uDAAjC2E,EAAcG,EAAmB,uCACxE,OAAQA,EAAO1D,MAKX,IAAK,YACD,OAAO,2BAAIpB,GAAX,IAAkBI,MAAM,GAAD,mBAAMJ,EAAMI,OAAZ,YAAsB0E,EAAOrD,YAExD,IAAK,mBAGL,IAAK,uBACD,OAAO,2BAAIzB,GAAX,IAAkBW,YAAamE,EAAOrD,UAC1C,QACI,OAAOzB,M,2DCnFT+E,G,WAaAC,G,WAUAC,G,WAiDAC,G,WAIAC,G,WAIAC,G,WAMeC,GAtFzB,SAAUN,IAAV,uEAE8B,OAF9B,kBAEoCO,YAAKC,GAFzC,OAGQ,OADMnF,EAFd,gBAGcoF,YAAI,CACNC,YAAI,CAACrE,KAAM,mBAAoBK,QAASrB,EAAMsB,MAAK,SAACgE,GAAD,MAAkB,MAATA,EAAIhF,QAChE+E,YAAI,CAACrE,KAAM,YAAaK,QAASrB,MAL7C,uDAQQuF,QAAQC,IAAR,MARR,qDAaA,SAAUZ,EAAQF,GAAlB,uEAE2B,OAF3B,kBAEiCQ,YAAKO,EAAUf,EAAOrD,SAFvD,OAGQ,OADMtD,EAFd,gBAGcsH,YAAI,CAACrE,KAAM,YAAaK,QAAS,CAACtD,KAHhD,4GAUA,SAAU8G,EAAYH,GAAtB,uEAEyB,OAFzB,kBAE+BQ,YAAKQ,EAAchB,EAAOrD,SAFzD,OAIQ,OAFItD,EAFZ,gBAIcsH,YAAI,CAACrE,KAAM,uBAAwBK,QAAStD,IAJ1D,4GAaA,IAAMoH,EAAS,uCAAG,4BAAAjF,EAAA,sEACMyF,IAAMC,IAAI,mGAAoG,CAACC,QAAS,CAAC,eAAgB,sBAD/I,cACRC,EADQ,yBAGPA,EAAKC,MAHE,2CAAH,qDAOTN,EAAQ,uCAAG,WAAMpE,GAAN,eAAAnB,EAAA,sEACUyF,IAAMK,KAAK,sEAAuE3E,EAAQ,CAACwE,QAAS,CAAC,eAAgB,sBAD/H,cACPI,EADO,yBAENA,EAASF,MAFH,2CAAH,sDAMRL,EAAY,uCAAG,WAAMrE,GAAN,iBAAAnB,EAAA,6DAIb/B,EAAOkD,EAAQtD,KAAKG,MAAMC,KAC9BkD,EAAQtD,KAAKG,MAAMsD,KAAOH,EAAQG,MACJ,IAA1BH,EAAQtD,KAAKsC,UAEPlC,EAAOkD,EAAQG,QADrBH,EAAQtD,KAAKG,MAAMC,KAAOkD,EAAQG,MAKtCH,EAAQtD,KAAKsC,SAAWgB,EAAQtD,KAAKsC,SAAW,EAZ/B,SAcMsF,IAAMN,IAAN,8EAAiFhE,EAAQtD,KAAKuC,IAAMe,EAAQtD,KAAM,CAAC8H,QAAS,CAAC,eAAgB,sBAdnJ,cAcXI,EAdW,yBAeVA,EAASF,MAfC,2CAAH,sDAuBlB,SAAUjB,IAAV,iEACI,OADJ,SACUoB,YAAW,aAAcvB,GADnC,uCAIA,SAAUI,IAAV,iEACI,OADJ,SACUmB,YAAW,WAAYtB,GADjC,uCAIA,SAAUI,IAAV,iEACI,OADJ,SACUkB,YAAW,kBAAmBrB,GADxC,uCAMe,SAAUI,IAAV,iEACX,OADW,SACLG,YAAI,CACNN,IACAC,IACAC,MAJO,uCCpFf,IAAMmB,EAAiBC,cAGVC,EAAQC,YAAY9B,EAAU+B,YAAgBJ,IAG3DA,EAAeK,IAAIC,GCLnBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAASA,EAAnB,SACE,cAAC,EAAD,QAGJlD,SAAS0D,eAAe,SAM1B/C,M","file":"static/js/main.d9f6b571.chunk.js","sourcesContent":["import React, {FC, MouseEvent} from \"react\";\r\nimport \"./Card.css\";\r\n\r\n// Interface resembling properties to the component Card \r\ninterface CardProps {\r\n    value: number; // the value to display at the front of the card, which is to be matched with corresponding card with same value\r\n    index: number; // index number of the card in the grid\r\n    disabled: boolean; // disable flag, inorder to temporarily disable click events when necessary\r\n    clickEvent: (htmlElement: HTMLDivElement) => void; // callback function to call on click event of Card (Callback is passed from App.tsx)\r\n}\r\n\r\n/**\r\n * Card is a Function Component resembling each individual flippable and matchable card in the game.  \r\n */\r\nconst Card: FC<CardProps> = (cardProps: CardProps) => {\r\n\r\n    // Handler for click event of the card.\r\n    // Do some disabled-check and flip (using .visibility class to simulate flipping) and fire the callback passed as a prop,\r\n    // so that the logic to carry out on click event is called only for non-disabled card.\r\n    const handleCardClick = (event: MouseEvent<HTMLDivElement>) => {\r\n        if (cardProps.disabled) return;\r\n        const element = (event.target as HTMLDivElement).parentElement as HTMLDivElement;\r\n        element!.classList.add(\"visibleState\");\r\n        cardProps.clickEvent(element);\r\n    }\r\n\r\n    return (\r\n        <div className=\"card\" data-value={cardProps.value} data-index={cardProps.index} onClick={handleCardClick}>\r\n            {/* Down face of the card which is shown initially. It shows an asterisk character with simple animation*/}\r\n            <div className=\"card-down _card\">\r\n                <span>*</span>\r\n            </div>\r\n\r\n            {/* The front face of the card  which shows the value of the card. This value is matched with another card's value */}\r\n            <div className=\"card-up _card\">\r\n                {cardProps.value}\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React, {FC} from \"react\";\r\nimport { User } from \"../../state/reducers/userReducer\";\r\n\r\n// Props for each entry of registered users in Highscore box\r\n// User is one registered user\r\n// you is a flag denoting if the user for this entry is the current (say, looged-in) user \r\ninterface IProps {\r\n    user: User;\r\n    you: boolean;\r\n}\r\n\r\n// Tis is one entry of one user in Highscore box\r\n// Dsiplays User name and All Time Score of the player\r\n// along with (YOU) for the currently logged-in user\r\nconst Entry: FC<IProps> = (props: IProps) =>{\r\n    return (\r\n        <div className=\"entry\">\r\n            <div className=\"user-entry-name\">{props.user.name} {(props.you)? \"(You)\" : \"\"}</div>\r\n            <div className=\"highscore-container\">\r\n                <div className=\"highscore-entry title sub\">All Time Score</div>\r\n                <div className=\"highscore-entry score\">{props.user.score.high} steps only</div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Entry;","import { User } from \"../state/reducers/userReducer\";\r\n\r\n// Fisher Yates Shuffling Algorithm (https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\r\n// Function to shuffle card values stored in an array. \r\nexport const shuffleCards = (arrayOfSize: number[]) => {\r\n    for (let i = arrayOfSize.length; i > 0; i--){\r\n      const randomIndex = Math.floor(Math.random() * i);\r\n      const currentIndex = i - 1;\r\n      const temp = arrayOfSize[currentIndex];\r\n      arrayOfSize[currentIndex] = arrayOfSize[randomIndex];\r\n      arrayOfSize[randomIndex] = temp;\r\n    }\r\n    return arrayOfSize;\r\n}\r\n\r\n// Return a numbered array of an input size.\r\n// Input size is \"gridLen\" which is \"n\" for n X n grid of cards. \r\nexport const arrayOfSize = (gridLen: number) => {\r\nreturn Array.from(Array<number>(gridLen * gridLen).keys());\r\n}\r\n\r\n// Returned a formatted string of time in MM:SS format from an input seconds value.\r\n// Considering the seriousness of the game, and for demonstration purpose, the formatting is done..\r\n// in a way to include MM:SS and exclude, or better say, without considering the value could reach in Hours.\r\n// So, a gameplay time of 1 hr 25 minutes 30 seconds would, for now, render as 85 minutes and 30 seconds.  \r\nexport const getFormattedTime = (time: number) => {\r\n    let sec = time % 60;\r\n    let min = Math.floor(time / 60);\r\n    return ((min <= 9)? \"0\" + min : min ) + \":\" + ((sec <= 9)? \"0\" + sec : sec)\r\n}\r\n\r\n// To sort the input array (Users array in particular, here) in DESCENDING order of their high scores. \r\nexport const sort = (array: User[]): User[] => {\r\n  return array.sort((a: User, b: User) => a.score.high - b.score.high);\r\n}","import React, {FC, useRef} from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Entry from \"./Entry\";\r\nimport { InitialState, State } from \"../../state/reducers/userReducer\";\r\nimport \"./styles.css\";\r\nimport { sort } from \"../functions\";\r\n\r\ninterface IOverlay{\r\n    visible: boolean;\r\n    callback: () => void;\r\n}\r\n\r\n// Functional Component for the Highscore box which is an overlay <div> \r\nconst HighScoreOverlay : FC<IOverlay> = (props: IOverlay) => {\r\n    \r\n    // referencing the top level overlay div,  for closing when neeed\r\n    const overlayRef = useRef(null);\r\n    \r\n    // Fetching the user state from Redux Store which contains the information about registered users/players\r\n    const userState: InitialState = useSelector((state: State) => state.userState);\r\n\r\n    return(\r\n        <div className={(props.visible)? \"overlay show\" : \"overlay\"} ref={overlayRef}>\r\n            <div className=\"highscore\">\r\n                <div className=\"tbar\">\r\n                    <div className=\"title tbar-title\">\r\n                        Highscores\r\n                    </div>\r\n                    {/* onClick event fires a callback which is passed from RightSection.tsx because the open/close state of the overlay is \r\n                    stored there. The project uses component-based state for runtime states and Redux state to store complex/server-fetchable data for now*/}\r\n                    <button className=\"asLink title sub\" onClick={props.callback}>Close</button>\r\n                </div>\r\n                <div className=\"users-score-list\">\r\n                    <div className=\"sub\">Note: Players with no gameplay aren't listed here</div>\r\n                {\r\n                    // For each user who has played at least once, pass their state for entry in Highscore section.\r\n                    //Sorting is done to display the top scorers first (in Descending order of their highscore).\r\n                    sort(userState.users).map((user) => {\r\n                        return (user.gameplay > 0) && <Entry user={user} you={user.id === userState.currentUser.id}/>\r\n                    })\r\n                }\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HighScoreOverlay;","import React, { FC, useState, useEffect, FormEvent, MouseEvent} from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { InitialState, State} from \"../../state/reducers/userReducer\";\r\nimport HighScoreOverlay from \"../HighScoreOverlay/\";\r\n\r\n/**\r\n * Functional Component which is the right section of the game screen (page)\r\n * Contains sections for displying player status, registration form, highscores, and a list of registered users to choose from.\r\n */\r\nconst RightSection: FC = () => {\r\n    \r\n    // State \"name\" to hold the name of player from registration form during registration\r\n    const [name, setName] = useState(\"\");\r\n    // state to store a flag whether to open/close the highscore box \r\n    const [isHighscoreOverlay, setHighscoreOverlay] = useState(false);\r\n\r\n    // Fetching user data from Redux Store\r\n    const userState : InitialState = useSelector((state: State) => state.userState);\r\n    // Initializing dipatcher for later use \r\n    const dispatch = useDispatch();\r\n    \r\n    // Dispatch action to Fetch User for the first render of this component.\r\n    // This dispatched action will be caught by Saga midddleware to asynchronously fetch users from json-server before dispatching...\r\n    //.. action to reducer for displaying the fetched users on screen\r\n    useEffect(()=>{\r\n        dispatch({type: \"FETCH_USER\"})\r\n    }, [])\r\n\r\n    // A handler for registration form submission\r\n    const submitHandle = (e: FormEvent) => {\r\n      e.preventDefault(); // Prevent page reload because we don't want that\r\n      // Validation check for empty name\r\n      if (name === \"\"){\r\n        alert(\"Can't add user without name\")\r\n        return;\r\n      }\r\n      // Dispatch an action of \"ADD_USER\" which is again caught by Saga to asynchronously add user to json server.. \r\n      // ... and the recently added user is populated on screen using another dispatch of action \"LOAD_USER\" from Saga itself.\r\n      // A user with supplied name and default score/gameplay of 0 is passed for insertion.  \r\n      dispatch({type: \"ADD_USER\", payload: {name: name, score: {high: 0, last: 0}, gameplay: 0}})\r\n    }\r\n\r\n    // A handler to set the current player to a selected player from the list\r\n    // You can select among the players listed on right section to play the game as that player.\r\n    // For demonstration purpose, and considering similar games that let you use any name while storing highscore, ..\r\n    // No user-authentication has been implemented. So anyone can play as any player just by selecting the name.\r\n    const handleChangeCurrent = (e: MouseEvent) =>{\r\n      const id = (e.target as HTMLDivElement).dataset.userId;\r\n      // Set current user to the selected user from already fetched list of users. So no async task of calling database is necessary.\r\n      dispatch({type: \"SET_CURRENT_USER\", payload: userState.users.find(user => user.id === id)})\r\n    }\r\n\r\n    // Toggle the flag for opening/closing the HighScore box\r\n    const handleHighScoreVisibility = () => {\r\n      setHighscoreOverlay(!isHighscoreOverlay);\r\n    }\r\n\r\n\r\n    return (\r\n      <div className=\"right-screen\">\r\n        <HighScoreOverlay visible={isHighscoreOverlay} callback={handleHighScoreVisibility}/>\r\n        <div className=\"current-user-section\">\r\n          <div className=\"title\">\r\n            Currently playing as:\r\n          </div>\r\n          <div className=\"user-name\">\r\n            {userState.currentUser.name}\r\n          </div>\r\n          <div className=\"all-time\">\r\n            <span className=\"title sub\">All Time Score</span>\r\n            <span className=\"data\">{userState.currentUser.score.high} steps {(userState.currentUser.score.high === 8)? \"(TOP)\" : \"\"}</span>\r\n          </div>\r\n          <div className=\"last-time\">\r\n            <span className=\"title sub\">On Last Session</span>\r\n            <span className=\"data\">{userState.currentUser.score.last} steps {(userState.currentUser.score.last === 8)? \"(TOP)\" : \"\"}</span>\r\n          </div>\r\n          <div className=\"gameplay\">\r\n            <span className=\"title sub\">Gameplay</span>\r\n            <span className=\"data\">{userState.currentUser.gameplay} times </span>\r\n          </div>\r\n        </div>\r\n        <div className=\"register-form-section\">\r\n          <span className=\"title sub asLink\" onClick={handleHighScoreVisibility}>Highscores</span>\r\n          <div className=\"title\">Register as New</div>\r\n          <form className=\"title\" method=\"post\" onSubmit={submitHandle}>\r\n            <input type=\"text\" name=\"name\" placeholder=\"Username\" onChange={(e) => setName(e.target.value)}/>\r\n            <button type=\"submit\" className=\"title asLink sub\">Register</button>\r\n          </form> \r\n        </div>\r\n        <div className=\"other-section\">\r\n          <div className=\"title sub\">Or, Play as an existing User</div>\r\n          <div className=\"user-list\">\r\n            {\r\n              Array.from(userState.users).map((user) => (<div className=\"a sub\" data-user-id={user.id} onClick={handleChangeCurrent}>{user.name}</div>))\r\n            }              \r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default RightSection;","import React, {FC, useState, useEffect} from 'react';\r\nimport Card from './components/Card';\r\nimport './App.css';\r\nimport RightSection from './components/RightSection/';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { InitialState, State } from './state/reducers/userReducer';\r\nimport { shuffleCards, arrayOfSize, getFormattedTime} from './components/functions';\r\n\r\nconst App: FC = () => {\r\n  const gridLen = 4; // \"n\" for n X n grid\r\n  //=================================================================================================================\r\n  // Because runtime/game-settings related states are not drilled deeper in component tree, these are not stored in Redux store for now\r\n  //=================================================================================================================\r\n\r\n  // Array of cards used in the grid, initially shuffled with values.\r\n  const [cardArr, setCardArr] = useState(() => {return shuffleCards(arrayOfSize(gridLen));});\r\n  \r\n  //===============================================================================================================\r\n  // The idea is:\r\n  // For n in n X n grid, say (n = 4), so,\r\n  // gridLen = 4\r\n  // arrayofSize(gridLen) returns an array with size of 4 * 4 = 16 containing [0,1,2,3,....,15]\r\n  // shuffleCards(array) takes that array and randomly shuffles the array elements\r\n  // So that cardArr above contains that shuffled array.\r\n  // Now, index 0 of that array is the first card which has the value of cardArr[index] and so on. So each card has randomly shuffled values\r\n  // ------------\r\n  // Every Card component holds its index (position) in the grid and its value (that shuffled value).\r\n  // ...Because we want matching pairs,\r\n  // ... I divided the linear values into 2 matching values. So, for 16 card configuration::\r\n  //......... the shuffled array, say for now is [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] which then becomes [0,1,2,3,4, 5, 6, 7, 0,1,2,3,4,5,6,7]..\r\n  // ........ that way, always exactly two cards will have the same value. Which is then used to match the pairs.\r\n  //================================================================================================================== \r\n\r\n  // State to store the ticking time in seconds, which is later formatted to render\r\n  const [timeValue, setTimeValue] = useState(0);\r\n\r\n  //to store the no of states the player is taking to finish matching all pairs\r\n  const [step, setStep] = useState(0);\r\n\r\n  // storing the flag to whether start the game by enabling all cards or to disable the game.\r\n  const [start, setStart] = useState(false);\r\n  \r\n  // storing all the matched cards during this gameplay\r\n  const [matchedCards, setMatchedCards] = useState<HTMLDivElement[]>([]);\r\n\r\n  // Storing the opened cards. Only two cards can be placed here in maximum.\r\n  // If the two opened cards match, they are moved to matchedCards array.\r\n  const [openedCards, setOpenedCards] = useState<HTMLDivElement[]>([]);\r\n\r\n  // Users from the Redux store\r\n  const userState: InitialState = useSelector((state: State) => state).userState;\r\n  \r\n  // Initializing dispatch function for throwing out actions when needed\r\n  const dispatch = useDispatch();\r\n\r\n  // A function used to start the game, which is handler for \"Start\" button\r\n  // Similarly, the start button reloads the game with new shuffled cards after one gameplay is done\r\n  const startGame = () => {\r\n    if (matchedCards.length === cardArr.length){\r\n      resetGame();\r\n    }\r\n    setStart(true);\r\n  }\r\n\r\n  // Function to reset the game, which is a handler for \"Reset\" button\r\n  const resetGame = () => {\r\n    // Remove all matched pairs and flip the pairs back\r\n    // Remove opened cards (if any) and flip the cards back\r\n    // Re-shuffle the values and store in cardArr\r\n    // Reset the steps and timer values to 0\r\n\r\n    matchedCards.forEach((card) => {\r\n      card.classList.remove(\"matched\");\r\n      card.classList.remove(\"visibleState\");\r\n\r\n    });\r\n\r\n    openedCards.forEach((card) => {\r\n      // card.classList.remove(\"matched\");\r\n      card.classList.remove(\"visibleState\");\r\n\r\n    });\r\n\r\n    setCardArr(shuffleCards(arrayOfSize(4)));\r\n    setStep(0);\r\n    setOpenedCards([]);\r\n    setMatchedCards([]);\r\n    if (start) setStart(false);\r\n    setTimeValue(0);\r\n  } \r\n\r\n  // Hanlder to be called when the card is clicked, after setting/unsetting its visibility\r\n  // The argument to be passed is HTMLElement correspondence of the Card component\r\n\r\n  const handleCardClick = (htmlElement: HTMLDivElement) => {\r\n    // Store the max of 2 cards in openedCards array\r\n    if (openedCards.length === 1){\r\n      setOpenedCards((prev) => [...prev, htmlElement])\r\n    }else{\r\n      setOpenedCards([htmlElement])\r\n    }\r\n  }\r\n\r\n  // Once the openedCards has 2 cards, evaluate the cards for their values.\r\n  // If matched, push them in matchedCards array\r\n  const evaluateCards = () => {\r\n    if (openedCards[0].dataset.value === openedCards[1].dataset.value){\r\n        openedCards.forEach((card) => {\r\n        card.classList.add(\"matched\");\r\n      })\r\n      setMatchedCards((matchedCards) => matchedCards.concat(openedCards));\r\n    }else{\r\n      // If not matched, flip the cards back after 500ms\r\n      setTimeout(() => {\r\n        openedCards.forEach((card) => card.classList.toggle(\"visibleState\"))\r\n      }, 500);\r\n\r\n    }\r\n  }\r\n\r\n  // Defined logic in ths hook is called on every \"matchedCards\" state change\r\n  // So, check if the matchedCards now contains all the desired number of cards\r\n  // and if so, the game is finished..\r\n  // and if so, update the players score.. \r\n  // and alert the congrats. message\r\n  // and disable the start state, so no more card flipping is possible before re-start\r\n  useEffect(()=>{\r\n    if (matchedCards.length === cardArr.length){\r\n      setStart(false);\r\n\r\n      dispatch({type: \"UPDATE_SCORE_DB\", payload: {last: step, user: userState.currentUser}});\r\n      \r\n      alert(\"Congratulation, you found the matches in \" + step + \" steps in \" + getFormattedTime(timeValue) + \" s\");\r\n\r\n    }\r\n  }, [matchedCards]);\r\n\r\n  // Because the size of the grid is not hard-coded, change the UI grid size (cols, rows count) of the grid container to match the cards number\r\n  useEffect(()=> {\r\n    (document.getElementsByClassName(\"main-container\")[0] as HTMLDivElement).style.gridTemplateColumns = \"repeat(\" + Math.sqrt(cardArr.length) + \", auto)\";\r\n  }, [cardArr.length]);\r\n\r\n  // Called every time openCards state changes,\r\n  // so if openCards contains 2 cards, then start evaluating them and increase the step count.\r\n  // Because everytime a player flips two cards, the player takes 1 step more. \r\n  useEffect(() => {\r\n    if (openedCards.length === 2){\r\n      setStep((step) => step + 1);\r\n      evaluateCards();\r\n    }\r\n  }, [openedCards])\r\n\r\n  //Called on every change of start flag.\r\n  // If the game is freshly started,\r\n  // ... start a count-up timer using SetInterval(..) to increase the seconds value\r\n  // If the game is finised, i..e. start = false, then clear the interval which was set to stop timer from running continuously.\r\n  useEffect(() => {\r\n    (document.getElementsByClassName(\"start\")[0] as HTMLInputElement).disabled = start;\r\n\r\n    let interval: NodeJS.Timeout;\r\n    if (start){\r\n      interval = setInterval(()=>{\r\n        setTimeValue((timeValue) => timeValue + 1);\r\n      }, 1000);\r\n    }else{\r\n      clearInterval(interval!);\r\n    }\r\n\r\n    return () => clearInterval(interval);\r\n\r\n  }, [start]);\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"left-screen\">\r\n        <div className=\"main-container\">\r\n          <div className=\"info\">\r\n            <div className=\"stopwatch\">Time<span className=\"stopwatch-value value\"> {getFormattedTime(timeValue)} </span></div>\r\n            <div className=\"steps\">Steps<span className=\"step-value value\"> {step} </span></div>          \r\n          </div>\r\n          <div className=\"controls\">\r\n            <div className={(start)? \"startWrapper\" : \"startWrapper start-active\"}>\r\n              <button className=\"start title sub asLink\" onClick={startGame}>Start</button>\r\n            </div>\r\n            <button className=\"reset title sub asLink\" onClick={resetGame}>Reset and Reshuffle</button>\r\n          </div>\r\n          {\r\n            // Render <Card> component for each element of cardArr. The Card component takes its position to be the\r\n            // index of cardArr and its value to be the value at that index i.e. cardArr[index]\r\n            // But, as mentioned above, to make matchable pairs,\r\n            //........ we divide the cards into two parts of n-squared / 2 length each. \r\n            //That is, for \"4\" in 4 X 4 grid of cards\r\n            // There are two pairs of (4 * 4) / 2 = 16 / 2 = 8 elements in each pair.\r\n            // To make matching values, set the actual value as the remaineder of the value % (n-squared / 2) \r\n            cardArr.map((card) => {\r\n              return <Card index ={card} value={(card + 1) % (Math.floor(cardArr.length/2))} clickEvent={handleCardClick} disabled={!start}/>;\r\n            })\r\n          }\r\n        </div>\r\n      </div>\r\n      <RightSection/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { combineReducers } from \"redux\";\r\n\r\n// type of Action which is a union of specific action types\r\n// Needed for specifying action variable types in necessary sections \r\nexport type Action = UserFetchAction | UserLoadAction | UserAddAction | CurrentUserSetAction | CurrentScoreUpdate | ScoreUpdateAction;\r\n\r\n// Type denoting the action of fetching users..\r\n// Redux Saga catches actions of this type as the action to be performed is asynchronous\r\ntype UserFetchAction = {\r\n    type: \"FETCH_USER\"\r\n}\r\n\r\n// Type denoting the action of loading users to screen/ setting users on Redux store (to be exact)\r\ntype UserLoadAction = {\r\n    type: \"LOAD_USER\",\r\n    payload: User[]\r\n}\r\n\r\n// Action tpye for setting current user to be the one supplied as payload \r\ntype CurrentUserSetAction = {\r\n    type: \"SET_CURRENT_USER\",\r\n    payload: User\r\n}\r\n\r\n// Action type to update score of current user on Redux store, and eventually reflect that on screen\r\ntype CurrentScoreUpdate = {\r\n    type: \"UPDATE_CURRENT_SCORE\",\r\n    payload: number\r\n}\r\n\r\n// Action type to update score of the player on json-server\r\n// The action to be performed is asynchronous and Redux Saga catches actions of this type \r\nexport type ScoreUpdateAction = {\r\n    type: \"UPDATE_SCORE_DB\",\r\n    payload: {\r\n        last: number,\r\n        user: User\r\n    }\r\n}\r\n\r\n// Redux saga catches this type of actions as it is asynchronous, to add user to json-server db \r\nexport type UserAddAction = {\r\n    type: \"ADD_USER\",\r\n    payload: User\r\n}\r\n\r\n// Type denoting the structure of a User/Player (used interchangably in comments here) model\r\nexport type User = {\r\n    name: string,\r\n    id: string,\r\n    score: {\r\n        high: number,\r\n        last: number,\r\n    },\r\n    gameplay: number // How many times has this user played the game? \r\n}\r\n\r\n// Structure of state to be placed in Redux Store\r\n// i.e. A list of registered user and a current user playing the game\r\nexport type InitialState = {\r\n    users: User[];\r\n    currentUser: User;\r\n}\r\n\r\n// Creating initial state from the structure above, to be used during Store creation\r\nconst initialState: InitialState = {\r\n    users: [],\r\n    currentUser: {name: \"Guest\", id: \"1\", score: {high: 0, last: 0}, gameplay: 0}\r\n}\r\n\r\n// User Reducer, to catch relevant action related to user state changes\r\n// Here the type ACTION can be from any of its uinon-ed types, as above,\r\n// Typescript is smart enough to select corresponding Action Type based on the type \"..\" string in switch case below. \r\nconst userReducer = (state: InitialState = initialState, action: Action) => {\r\n    switch (action.type){\r\n        // For loading user, i.e. storing users on Redux store, create a new state including new users to be stored\r\n        // Becuase load user is done initially after fetching all users, so there is no need to keep previous state of users\r\n        // But because load user is also called at anytime during runtime after registering new user, we preserve the previous state...\r\n        // ... to prevent database fetch every time a new user is registered, so that a new user is just added to already-fetched list of users \r\n        case \"LOAD_USER\":\r\n            return {...state, users: [...state.users, ...action.payload]}\r\n        // To set the current user of this game play session, payload is the User who is selected to be a current player \r\n        case \"SET_CURRENT_USER\":\r\n            return {...state, currentUser: action.payload}\r\n        // To update the score of the current player, if needed, on Redux store and eventually on screen\r\n        case \"UPDATE_CURRENT_SCORE\":\r\n            return {...state, currentUser: action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Not needed for now\r\n// Combining all reducers because Store expects a single reducer variable. \r\n// Used in this way, just so that modifying/adding new reducers, if necessary, would be easy\r\nconst reducers = combineReducers({\r\n    userState: userReducer\r\n})\r\n\r\nexport default reducers;\r\n\r\n// The type of State kept in Redux store. Because the reducer returns the state, the type is set to the return type of reducer\r\nexport type State = ReturnType<typeof reducers>;","import axios from 'axios';\r\nimport { all, call, put, takeLatest } from 'redux-saga/effects'\r\nimport { ScoreUpdateAction, User, UserAddAction } from './reducers/userReducer';\r\n\r\n// Generator function that calls another function to asynchronously fetch users from the server and on complete of fetch, dispatches action to load the fetched users on Redux store \r\nfunction* getUser(){\r\n    try{\r\n        const users: User[] = yield call(fetchUser);\r\n        yield all([\r\n            put({type: \"SET_CURRENT_USER\", payload: users.find((one) => one.id===\"1\")}),\r\n            put({type: \"LOAD_USER\", payload: users})\r\n        ])\r\n    }catch(e){\r\n        console.log(e);\r\n    }\r\n} \r\n\r\n// Generator function  that calls another function to async. add user to server and dispatch action to load/add the new user on Redux store \r\nfunction* addUser(action: UserAddAction){\r\n    try{\r\n        const user: User = yield call(_addUser, action.payload);\r\n        yield put({type: \"LOAD_USER\", payload: [user]})\r\n    }catch(e){\r\n\r\n    }\r\n}\r\n\r\n// Generator function that calls another function to async. update users' score and status on server's db and dispatch action to update the user status on Redux store as well \r\nfunction* updateScore(action: ScoreUpdateAction){\r\n    try{\r\n        let user: User = yield call(_updateScore, action.payload);\r\n        // console.log(user);\r\n        yield put({type: \"UPDATE_CURRENT_SCORE\", payload: user})\r\n    }catch(e){\r\n\r\n    }\r\n}\r\n\r\n//=============================================================================================\r\n\r\n// Actual function that uses axios to async. fetch users list from the server\r\nconst fetchUser = async() => {\r\n    const resp =  await axios.get(\"https://my-json-server.typicode.com/koiralamandip/matchingJSON/user?_sort=score[high]&_order=asc\", {headers: {'Content-Type': 'application/json'}});\r\n    // console.log(resp.data)\r\n    return resp.data\r\n}\r\n\r\n// Function to async. add/insert user to the server\r\nconst _addUser = async(payload: User) => {\r\n    const response = await axios.post(\"https://my-json-server.typicode.com/koiralamandip/matchingJSON/user\", payload,{headers: {'Content-Type': 'application/json'}});\r\n    return response.data\r\n}\r\n\r\n// Function to async. update the user status on server's db\r\nconst _updateScore = async(payload: {last: number, user: User}) => {\r\n    // If last score is better than high score, set high score to the last score, or leave the high score as it is\r\n    // But if highscore is < 8 (initial state = 0, remember?), i.e. if the player hasn't played the game once,..\r\n    // ...always change highscore to reflect last score \r\n    let high = payload.user.score.high;\r\n    payload.user.score.last = payload.last;\r\n    if (payload.user.gameplay === 0){\r\n        payload.user.score.high = payload.last;\r\n    }else if (high > payload.last){\r\n        payload.user.score.high = payload.last;\r\n    }\r\n    // On every update of user status, we know the player played the game one more time\r\n    payload.user.gameplay = payload.user.gameplay + 1;\r\n    \r\n    const response = await axios.put(`https://my-json-server.typicode.com/koiralamandip/matchingJSON/user/${payload.user.id}`, payload.user, {headers: {'Content-Type': 'application/json'}});\r\n    return response.data\r\n}\r\n\r\n//================================================================================================\r\n// Watcher generator functions that watch for actions of types mentioned as below,\r\n// .. and care for only the last dispatch of such actions\r\n//.. and call appropriate functions to carry on with the logic for such actions \r\n\r\nfunction* getUserSaga(){\r\n    yield takeLatest(\"FETCH_USER\", getUser);\r\n}\r\n\r\nfunction* addUserSaga(){\r\n    yield takeLatest(\"ADD_USER\", addUser);\r\n}\r\n\r\nfunction* updateScoreSaga(){\r\n    yield takeLatest(\"UPDATE_SCORE_DB\", updateScore);\r\n}\r\n\r\n// Similar to combining reducers, this is a combination of all watcher functions of Saga, because we need to set up watchers on store (store.js)\r\n// it is easy to wrap all watchers into a single function, for ease in setting up saga\r\nexport default function* rootSaga(){\r\n    yield all([\r\n        getUserSaga(),\r\n        addUserSaga(),\r\n        updateScoreSaga(),\r\n    ])\r\n}\r\n\r\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport createSagaMiddleware from \"@redux-saga/core\";\r\nimport reducers from \"./reducers/userReducer\";\r\nimport mySaga from \"./saga\";\r\n\r\n// Creating a saga middleware that watches the relevant action before reducers get them\r\n// So that saga can use those actions for async. tasks \r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\n// Creating a store with the combined reducer, and configuration to apply saga.\r\nexport const store = createStore(reducers, applyMiddleware(sagaMiddleware));\r\n\r\n// finally, run the combined saga wather function so that Saga is activated.\r\nsagaMiddleware.run(mySaga);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport {store} from './state/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store = {store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}